// StatisticTag automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app

package backend

import (
	"encoding/json"
	"errors"
	"github.com/apioo/sdkgen-go"
	"io"
	"net/http"
	"net/url"
	"time"
)

type StatisticTag struct {
	internal *sdkgen.TagAbstract
}

// GetUsedPoints
func (client *StatisticTag) GetUsedPoints(startIndex int, count int, search string, from time.Time, to time.Time, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (StatisticChart, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})
	queryParams["startIndex"] = startIndex
	queryParams["count"] = count
	queryParams["search"] = search
	queryParams["from"] = from
	queryParams["to"] = to
	queryParams["operationId"] = operationId
	queryParams["appId"] = appId
	queryParams["userId"] = userId
	queryParams["ip"] = ip
	queryParams["userAgent"] = userAgent
	queryParams["method"] = method
	queryParams["path"] = path
	queryParams["header"] = header
	queryParams["body"] = body

	u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/used_points", pathParams))
	if err != nil {
		return StatisticChart{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return StatisticChart{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return StatisticChart{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return StatisticChart{}, errors.New("could not read response body")
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var response StatisticChart
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	case 401:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return StatisticChart{}, &MessageException{
			Payload: response,
		}
	case 500:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return StatisticChart{}, &MessageException{
			Payload: response,
		}
	default:
		return StatisticChart{}, errors.New("the server returned an unknown status code")
	}
}

// GetTimePerOperation
func (client *StatisticTag) GetTimePerOperation(startIndex int, count int, search string, from time.Time, to time.Time, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (StatisticChart, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})
	queryParams["startIndex"] = startIndex
	queryParams["count"] = count
	queryParams["search"] = search
	queryParams["from"] = from
	queryParams["to"] = to
	queryParams["operationId"] = operationId
	queryParams["appId"] = appId
	queryParams["userId"] = userId
	queryParams["ip"] = ip
	queryParams["userAgent"] = userAgent
	queryParams["method"] = method
	queryParams["path"] = path
	queryParams["header"] = header
	queryParams["body"] = body

	u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/time_per_operation", pathParams))
	if err != nil {
		return StatisticChart{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return StatisticChart{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return StatisticChart{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return StatisticChart{}, errors.New("could not read response body")
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var response StatisticChart
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	case 401:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return StatisticChart{}, &MessageException{
			Payload: response,
		}
	case 500:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return StatisticChart{}, &MessageException{
			Payload: response,
		}
	default:
		return StatisticChart{}, errors.New("the server returned an unknown status code")
	}
}

// GetTimeAverage
func (client *StatisticTag) GetTimeAverage(startIndex int, count int, search string, from time.Time, to time.Time, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (StatisticChart, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})
	queryParams["startIndex"] = startIndex
	queryParams["count"] = count
	queryParams["search"] = search
	queryParams["from"] = from
	queryParams["to"] = to
	queryParams["operationId"] = operationId
	queryParams["appId"] = appId
	queryParams["userId"] = userId
	queryParams["ip"] = ip
	queryParams["userAgent"] = userAgent
	queryParams["method"] = method
	queryParams["path"] = path
	queryParams["header"] = header
	queryParams["body"] = body

	u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/time_average", pathParams))
	if err != nil {
		return StatisticChart{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return StatisticChart{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return StatisticChart{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return StatisticChart{}, errors.New("could not read response body")
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var response StatisticChart
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	case 401:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return StatisticChart{}, &MessageException{
			Payload: response,
		}
	case 500:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return StatisticChart{}, &MessageException{
			Payload: response,
		}
	default:
		return StatisticChart{}, errors.New("the server returned an unknown status code")
	}
}

// GetMostUsedOperations
func (client *StatisticTag) GetMostUsedOperations(startIndex int, count int, search string, from time.Time, to time.Time, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (StatisticChart, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})
	queryParams["startIndex"] = startIndex
	queryParams["count"] = count
	queryParams["search"] = search
	queryParams["from"] = from
	queryParams["to"] = to
	queryParams["operationId"] = operationId
	queryParams["appId"] = appId
	queryParams["userId"] = userId
	queryParams["ip"] = ip
	queryParams["userAgent"] = userAgent
	queryParams["method"] = method
	queryParams["path"] = path
	queryParams["header"] = header
	queryParams["body"] = body

	u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/most_used_operations", pathParams))
	if err != nil {
		return StatisticChart{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return StatisticChart{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return StatisticChart{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return StatisticChart{}, errors.New("could not read response body")
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var response StatisticChart
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	case 401:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return StatisticChart{}, &MessageException{
			Payload: response,
		}
	case 500:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return StatisticChart{}, &MessageException{
			Payload: response,
		}
	default:
		return StatisticChart{}, errors.New("the server returned an unknown status code")
	}
}

// GetMostUsedApps
func (client *StatisticTag) GetMostUsedApps(startIndex int, count int, search string, from time.Time, to time.Time, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (StatisticChart, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})
	queryParams["startIndex"] = startIndex
	queryParams["count"] = count
	queryParams["search"] = search
	queryParams["from"] = from
	queryParams["to"] = to
	queryParams["operationId"] = operationId
	queryParams["appId"] = appId
	queryParams["userId"] = userId
	queryParams["ip"] = ip
	queryParams["userAgent"] = userAgent
	queryParams["method"] = method
	queryParams["path"] = path
	queryParams["header"] = header
	queryParams["body"] = body

	u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/most_used_apps", pathParams))
	if err != nil {
		return StatisticChart{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return StatisticChart{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return StatisticChart{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return StatisticChart{}, errors.New("could not read response body")
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var response StatisticChart
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	case 401:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return StatisticChart{}, &MessageException{
			Payload: response,
		}
	case 500:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return StatisticChart{}, &MessageException{
			Payload: response,
		}
	default:
		return StatisticChart{}, errors.New("the server returned an unknown status code")
	}
}

// GetIssuedTokens
func (client *StatisticTag) GetIssuedTokens(startIndex int, count int, search string, from time.Time, to time.Time, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (StatisticChart, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})
	queryParams["startIndex"] = startIndex
	queryParams["count"] = count
	queryParams["search"] = search
	queryParams["from"] = from
	queryParams["to"] = to
	queryParams["operationId"] = operationId
	queryParams["appId"] = appId
	queryParams["userId"] = userId
	queryParams["ip"] = ip
	queryParams["userAgent"] = userAgent
	queryParams["method"] = method
	queryParams["path"] = path
	queryParams["header"] = header
	queryParams["body"] = body

	u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/issued_tokens", pathParams))
	if err != nil {
		return StatisticChart{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return StatisticChart{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return StatisticChart{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return StatisticChart{}, errors.New("could not read response body")
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var response StatisticChart
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	case 401:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return StatisticChart{}, &MessageException{
			Payload: response,
		}
	case 500:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return StatisticChart{}, &MessageException{
			Payload: response,
		}
	default:
		return StatisticChart{}, errors.New("the server returned an unknown status code")
	}
}

// GetIncomingTransactions
func (client *StatisticTag) GetIncomingTransactions(startIndex int, count int, search string, from time.Time, to time.Time, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (StatisticChart, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})
	queryParams["startIndex"] = startIndex
	queryParams["count"] = count
	queryParams["search"] = search
	queryParams["from"] = from
	queryParams["to"] = to
	queryParams["operationId"] = operationId
	queryParams["appId"] = appId
	queryParams["userId"] = userId
	queryParams["ip"] = ip
	queryParams["userAgent"] = userAgent
	queryParams["method"] = method
	queryParams["path"] = path
	queryParams["header"] = header
	queryParams["body"] = body

	u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/incoming_transactions", pathParams))
	if err != nil {
		return StatisticChart{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return StatisticChart{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return StatisticChart{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return StatisticChart{}, errors.New("could not read response body")
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var response StatisticChart
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	case 401:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return StatisticChart{}, &MessageException{
			Payload: response,
		}
	case 500:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return StatisticChart{}, &MessageException{
			Payload: response,
		}
	default:
		return StatisticChart{}, errors.New("the server returned an unknown status code")
	}
}

// GetIncomingRequests
func (client *StatisticTag) GetIncomingRequests(startIndex int, count int, search string, from time.Time, to time.Time, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (StatisticChart, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})
	queryParams["startIndex"] = startIndex
	queryParams["count"] = count
	queryParams["search"] = search
	queryParams["from"] = from
	queryParams["to"] = to
	queryParams["operationId"] = operationId
	queryParams["appId"] = appId
	queryParams["userId"] = userId
	queryParams["ip"] = ip
	queryParams["userAgent"] = userAgent
	queryParams["method"] = method
	queryParams["path"] = path
	queryParams["header"] = header
	queryParams["body"] = body

	u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/incoming_requests", pathParams))
	if err != nil {
		return StatisticChart{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return StatisticChart{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return StatisticChart{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return StatisticChart{}, errors.New("could not read response body")
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var response StatisticChart
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	case 401:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return StatisticChart{}, &MessageException{
			Payload: response,
		}
	case 500:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return StatisticChart{}, &MessageException{
			Payload: response,
		}
	default:
		return StatisticChart{}, errors.New("the server returned an unknown status code")
	}
}

// GetErrorsPerOperation
func (client *StatisticTag) GetErrorsPerOperation(startIndex int, count int, search string, from time.Time, to time.Time, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (StatisticChart, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})
	queryParams["startIndex"] = startIndex
	queryParams["count"] = count
	queryParams["search"] = search
	queryParams["from"] = from
	queryParams["to"] = to
	queryParams["operationId"] = operationId
	queryParams["appId"] = appId
	queryParams["userId"] = userId
	queryParams["ip"] = ip
	queryParams["userAgent"] = userAgent
	queryParams["method"] = method
	queryParams["path"] = path
	queryParams["header"] = header
	queryParams["body"] = body

	u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/errors_per_operation", pathParams))
	if err != nil {
		return StatisticChart{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return StatisticChart{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return StatisticChart{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return StatisticChart{}, errors.New("could not read response body")
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var response StatisticChart
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	case 401:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return StatisticChart{}, &MessageException{
			Payload: response,
		}
	case 500:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return StatisticChart{}, &MessageException{
			Payload: response,
		}
	default:
		return StatisticChart{}, errors.New("the server returned an unknown status code")
	}
}

// GetCountRequests
func (client *StatisticTag) GetCountRequests(startIndex int, count int, search string, from time.Time, to time.Time, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (StatisticCount, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})
	queryParams["startIndex"] = startIndex
	queryParams["count"] = count
	queryParams["search"] = search
	queryParams["from"] = from
	queryParams["to"] = to
	queryParams["operationId"] = operationId
	queryParams["appId"] = appId
	queryParams["userId"] = userId
	queryParams["ip"] = ip
	queryParams["userAgent"] = userAgent
	queryParams["method"] = method
	queryParams["path"] = path
	queryParams["header"] = header
	queryParams["body"] = body

	u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/count_requests", pathParams))
	if err != nil {
		return StatisticCount{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return StatisticCount{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return StatisticCount{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return StatisticCount{}, errors.New("could not read response body")
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var response StatisticCount
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticCount{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	case 401:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticCount{}, errors.New("could not unmarshal JSON response")
		}

		return StatisticCount{}, &MessageException{
			Payload: response,
		}
	case 500:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticCount{}, errors.New("could not unmarshal JSON response")
		}

		return StatisticCount{}, &MessageException{
			Payload: response,
		}
	default:
		return StatisticCount{}, errors.New("the server returned an unknown status code")
	}
}

func NewStatisticTag(httpClient *http.Client, parser *sdkgen.Parser) *StatisticTag {
	return &StatisticTag{
		internal: &sdkgen.TagAbstract{
			HttpClient: httpClient,
			Parser:     parser,
		},
	}
}
