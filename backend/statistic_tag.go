// StatisticTag automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app

package backend

import (
	"github.com/apioo/sdkgen-go"
)

type StatisticTag struct {
	internal *sdkgen.TagAbstract
}

// GetUsedPoints
func (client *StatisticTag) GetUsedPoints() (StatisticChart, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})

	u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/used_points", pathParams))
	if err != nil {
		return StatisticChart{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return StatisticChart{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return StatisticChart{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return StatisticChart{}, errors.New("could not read response body")
		}

		var response StatisticChart
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	default:
		return StatisticChart{}, errors.New("the server returned an unknown status code")
	}
}

// GetTimePerRoute
func (client *StatisticTag) GetTimePerRoute() (StatisticChart, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})

	u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/time_per_route", pathParams))
	if err != nil {
		return StatisticChart{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return StatisticChart{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return StatisticChart{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return StatisticChart{}, errors.New("could not read response body")
		}

		var response StatisticChart
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	default:
		return StatisticChart{}, errors.New("the server returned an unknown status code")
	}
}

// GetTimeAverage
func (client *StatisticTag) GetTimeAverage() (StatisticChart, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})

	u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/time_average", pathParams))
	if err != nil {
		return StatisticChart{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return StatisticChart{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return StatisticChart{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return StatisticChart{}, errors.New("could not read response body")
		}

		var response StatisticChart
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	default:
		return StatisticChart{}, errors.New("the server returned an unknown status code")
	}
}

// GetMostUsedRoutes
func (client *StatisticTag) GetMostUsedRoutes() (StatisticChart, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})

	u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/most_used_routes", pathParams))
	if err != nil {
		return StatisticChart{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return StatisticChart{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return StatisticChart{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return StatisticChart{}, errors.New("could not read response body")
		}

		var response StatisticChart
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	default:
		return StatisticChart{}, errors.New("the server returned an unknown status code")
	}
}

// GetMostUsedApps
func (client *StatisticTag) GetMostUsedApps() (StatisticChart, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})

	u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/most_used_apps", pathParams))
	if err != nil {
		return StatisticChart{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return StatisticChart{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return StatisticChart{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return StatisticChart{}, errors.New("could not read response body")
		}

		var response StatisticChart
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	default:
		return StatisticChart{}, errors.New("the server returned an unknown status code")
	}
}

// GetIssuedTokens
func (client *StatisticTag) GetIssuedTokens() (StatisticChart, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})

	u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/issued_tokens", pathParams))
	if err != nil {
		return StatisticChart{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return StatisticChart{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return StatisticChart{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return StatisticChart{}, errors.New("could not read response body")
		}

		var response StatisticChart
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	default:
		return StatisticChart{}, errors.New("the server returned an unknown status code")
	}
}

// GetIncomingTransactions
func (client *StatisticTag) GetIncomingTransactions() (StatisticChart, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})

	u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/incoming_transactions", pathParams))
	if err != nil {
		return StatisticChart{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return StatisticChart{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return StatisticChart{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return StatisticChart{}, errors.New("could not read response body")
		}

		var response StatisticChart
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	default:
		return StatisticChart{}, errors.New("the server returned an unknown status code")
	}
}

// GetIncomingRequests
func (client *StatisticTag) GetIncomingRequests() (StatisticChart, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})

	u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/incoming_requests", pathParams))
	if err != nil {
		return StatisticChart{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return StatisticChart{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return StatisticChart{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return StatisticChart{}, errors.New("could not read response body")
		}

		var response StatisticChart
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	default:
		return StatisticChart{}, errors.New("the server returned an unknown status code")
	}
}

// GetErrorsPerRoute
func (client *StatisticTag) GetErrorsPerRoute() (StatisticChart, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})

	u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/errors_per_route", pathParams))
	if err != nil {
		return StatisticChart{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return StatisticChart{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return StatisticChart{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return StatisticChart{}, errors.New("could not read response body")
		}

		var response StatisticChart
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticChart{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	default:
		return StatisticChart{}, errors.New("the server returned an unknown status code")
	}
}

// GetCountRequests
func (client *StatisticTag) GetCountRequests() (StatisticCount, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})

	u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/count_requests", pathParams))
	if err != nil {
		return StatisticCount{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return StatisticCount{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return StatisticCount{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return StatisticCount{}, errors.New("could not read response body")
		}

		var response StatisticCount
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return StatisticCount{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	default:
		return StatisticCount{}, errors.New("the server returned an unknown status code")
	}
}

func NewStatisticTag(httpClient *http.Client, parser *sdkgen.Parser) *StatisticTag {
	return &StatisticTag{
		internal: &sdkgen.TagAbstract{
			HttpClient: httpClient,
			Parser:     parser,
		},
	}
}
