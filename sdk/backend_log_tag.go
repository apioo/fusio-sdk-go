
// BackendLogTag automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app


package sdk

import (
    
    "encoding/json"
    "errors"
    "fmt"
    
    "io"
    "net/http"
    "net/url"
    
)

type BackendLogTag struct {
    internal *sdkgen.TagAbstract
}



// Get 
func (client *BackendLogTag) Get(logId string) (BackendLog, error) {
    pathParams := make(map[string]interface{})
    pathParams["log_id"] = logId

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/log/$log_id<[0-9]+>", pathParams))
    if err != nil {
        return BackendLog{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendLog{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendLog{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendLog{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data BackendLog
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode >= 0 && statusCode <= 999 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendLog{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return BackendLog{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// GetAll 
func (client *BackendLogTag) GetAll(startIndex int, count int, search string, from string, to string, routeId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (BackendLogCollection, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})
    queryParams["startIndex"] = startIndex
    queryParams["count"] = count
    queryParams["search"] = search
    queryParams["from"] = from
    queryParams["to"] = to
    queryParams["routeId"] = routeId
    queryParams["appId"] = appId
    queryParams["userId"] = userId
    queryParams["ip"] = ip
    queryParams["userAgent"] = userAgent
    queryParams["method"] = method
    queryParams["path"] = path
    queryParams["header"] = header
    queryParams["body"] = body

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/log", pathParams))
    if err != nil {
        return BackendLogCollection{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendLogCollection{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendLogCollection{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendLogCollection{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data BackendLogCollection
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode >= 0 && statusCode <= 999 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendLogCollection{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return BackendLogCollection{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// GetAllErrors 
func (client *BackendLogTag) GetAllErrors(startIndex int, count int, search string) (BackendLogErrorCollection, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})
    queryParams["startIndex"] = startIndex
    queryParams["count"] = count
    queryParams["search"] = search

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/log/error", pathParams))
    if err != nil {
        return BackendLogErrorCollection{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendLogErrorCollection{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendLogErrorCollection{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendLogErrorCollection{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data BackendLogErrorCollection
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode >= 0 && statusCode <= 999 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendLogErrorCollection{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return BackendLogErrorCollection{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// GetError 
func (client *BackendLogTag) GetError(errorId string) (BackendLogError, error) {
    pathParams := make(map[string]interface{})
    pathParams["error_id"] = errorId

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/log/error/$error_id<[0-9]+>", pathParams))
    if err != nil {
        return BackendLogError{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendLogError{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendLogError{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendLogError{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data BackendLogError
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode >= 0 && statusCode <= 999 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendLogError{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return BackendLogError{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}




func NewBackendLogTag(httpClient *http.Client, parser *sdkgen.Parser) *BackendLogTag {
	return &BackendLogTag{
        internal: &sdkgen.TagAbstract{
            HttpClient: httpClient,
            Parser: parser,
        },
	}
}
