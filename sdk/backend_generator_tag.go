
// BackendGeneratorTag automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app


package sdk

import (
    "bytes"
    "encoding/json"
    "errors"
    "fmt"
    
    "io"
    "net/http"
    "net/url"
    
)

type BackendGeneratorTag struct {
    internal *sdkgen.TagAbstract
}



// GetChangelog 
func (client *BackendGeneratorTag) GetChangelog(provider string, payload BackendGeneratorProviderConfig) (BackendGeneratorProviderChangelog, error) {
    pathParams := make(map[string]interface{})
    pathParams["provider"] = provider

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/generator/:provider", pathParams))
    if err != nil {
        return BackendGeneratorProviderChangelog{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

    raw, err := json.Marshal(payload)
    if err != nil {
        return BackendGeneratorProviderChangelog{}, err
    }

    var reqBody = bytes.NewReader(raw)

    req, err := http.NewRequest("PUT", u.String(), reqBody)
    if err != nil {
        return BackendGeneratorProviderChangelog{}, err
    }

    req.Header.Set("Content-Type", "application/json")

    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendGeneratorProviderChangelog{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendGeneratorProviderChangelog{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data BackendGeneratorProviderChangelog
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 400 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendGeneratorProviderChangelog{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 401 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendGeneratorProviderChangelog{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendGeneratorProviderChangelog{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return BackendGeneratorProviderChangelog{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// ExecuteProvider 
func (client *BackendGeneratorTag) ExecuteProvider(provider string, payload BackendGeneratorProvider) (CommonMessage, error) {
    pathParams := make(map[string]interface{})
    pathParams["provider"] = provider

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/generator/:provider", pathParams))
    if err != nil {
        return CommonMessage{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

    raw, err := json.Marshal(payload)
    if err != nil {
        return CommonMessage{}, err
    }

    var reqBody = bytes.NewReader(raw)

    req, err := http.NewRequest("POST", u.String(), reqBody)
    if err != nil {
        return CommonMessage{}, err
    }

    req.Header.Set("Content-Type", "application/json")

    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return CommonMessage{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return CommonMessage{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 400 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 401 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return CommonMessage{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// GetForm 
func (client *BackendGeneratorTag) GetForm(provider string) (CommonFormContainer, error) {
    pathParams := make(map[string]interface{})
    pathParams["provider"] = provider

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/generator/:provider", pathParams))
    if err != nil {
        return CommonFormContainer{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return CommonFormContainer{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return CommonFormContainer{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return CommonFormContainer{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data CommonFormContainer
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 400 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonFormContainer{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 401 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonFormContainer{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonFormContainer{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return CommonFormContainer{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// GetClasses 
func (client *BackendGeneratorTag) GetClasses() (BackendGeneratorIndexProviders, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/generator", pathParams))
    if err != nil {
        return BackendGeneratorIndexProviders{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendGeneratorIndexProviders{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendGeneratorIndexProviders{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendGeneratorIndexProviders{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data BackendGeneratorIndexProviders
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 401 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendGeneratorIndexProviders{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendGeneratorIndexProviders{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return BackendGeneratorIndexProviders{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}




func NewBackendGeneratorTag(httpClient *http.Client, parser *sdkgen.Parser) *BackendGeneratorTag {
	return &BackendGeneratorTag{
        internal: &sdkgen.TagAbstract{
            HttpClient: httpClient,
            Parser: parser,
        },
	}
}
