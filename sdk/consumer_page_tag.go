// ConsumerPageTag automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app

package fusio

import (
	"encoding/json"
	"errors"
	"github.com/apioo/sdkgen-go"
	"io"
	"net/http"
	"net/url"
)

type ConsumerPageTag struct {
	internal *sdkgen.TagAbstract
}

// Get
func (client *ConsumerPageTag) Get(pageId string) (ConsumerPage, error) {
	pathParams := make(map[string]interface{})
	pathParams["page_id"] = pageId

	queryParams := make(map[string]interface{})

	u, err := url.Parse(client.internal.Parser.Url("/consumer/page/:page_id", pathParams))
	if err != nil {
		return ConsumerPage{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return ConsumerPage{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return ConsumerPage{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return ConsumerPage{}, errors.New("could not read response body")
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var response ConsumerPage
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return ConsumerPage{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	case 401:
		var response CommonMessage
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return ConsumerPage{}, errors.New("could not unmarshal JSON response")
		}

		return ConsumerPage{}, &CommonMessageException{
			Payload: response,
		}
	case 404:
		var response CommonMessage
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return ConsumerPage{}, errors.New("could not unmarshal JSON response")
		}

		return ConsumerPage{}, &CommonMessageException{
			Payload: response,
		}
	case 410:
		var response CommonMessage
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return ConsumerPage{}, errors.New("could not unmarshal JSON response")
		}

		return ConsumerPage{}, &CommonMessageException{
			Payload: response,
		}
	case 500:
		var response CommonMessage
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return ConsumerPage{}, errors.New("could not unmarshal JSON response")
		}

		return ConsumerPage{}, &CommonMessageException{
			Payload: response,
		}
	default:
		return ConsumerPage{}, errors.New("the server returned an unknown status code")
	}
}

// GetAll
func (client *ConsumerPageTag) GetAll(startIndex int, count int, search string) (ConsumerPageCollection, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})
	queryParams["startIndex"] = startIndex
	queryParams["count"] = count
	queryParams["search"] = search

	u, err := url.Parse(client.internal.Parser.Url("/consumer/page", pathParams))
	if err != nil {
		return ConsumerPageCollection{}, errors.New("could not parse url")
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return ConsumerPageCollection{}, errors.New("could not create request")
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return ConsumerPageCollection{}, errors.New("could not send request")
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return ConsumerPageCollection{}, errors.New("could not read response body")
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var response ConsumerPageCollection
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return ConsumerPageCollection{}, errors.New("could not unmarshal JSON response")
		}

		return response, nil
	}

	switch resp.StatusCode {
	case 401:
		var response CommonMessage
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return ConsumerPageCollection{}, errors.New("could not unmarshal JSON response")
		}

		return ConsumerPageCollection{}, &CommonMessageException{
			Payload: response,
		}
	case 500:
		var response CommonMessage
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return ConsumerPageCollection{}, errors.New("could not unmarshal JSON response")
		}

		return ConsumerPageCollection{}, &CommonMessageException{
			Payload: response,
		}
	default:
		return ConsumerPageCollection{}, errors.New("the server returned an unknown status code")
	}
}

func NewConsumerPageTag(httpClient *http.Client, parser *sdkgen.Parser) *ConsumerPageTag {
	return &ConsumerPageTag{
		internal: &sdkgen.TagAbstract{
			HttpClient: httpClient,
			Parser:     parser,
		},
	}
}
