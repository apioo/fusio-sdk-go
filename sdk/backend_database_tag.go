
// BackendDatabaseTag automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app


package sdk

import (
    "bytes"
    "encoding/json"
    "errors"
    "fmt"
    
    "io"
    "net/http"
    "net/url"
    
)

type BackendDatabaseTag struct {
    internal *sdkgen.TagAbstract
}



// DeleteRow 
func (client *BackendDatabaseTag) DeleteRow(connectionId string, tableName string, id string) (CommonMessage, error) {
    pathParams := make(map[string]interface{})
    pathParams["connection_id"] = connectionId
    pathParams["table_name"] = tableName
    pathParams["id"] = id

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/database/:connection_id/:table_name/rows/:id", pathParams))
    if err != nil {
        return CommonMessage{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("DELETE", u.String(), nil)
    if err != nil {
        return CommonMessage{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return CommonMessage{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return CommonMessage{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 400 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 401 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 404 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return CommonMessage{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// UpdateRow 
func (client *BackendDatabaseTag) UpdateRow(connectionId string, tableName string, id string, payload BackendDatabaseRow) (CommonMessage, error) {
    pathParams := make(map[string]interface{})
    pathParams["connection_id"] = connectionId
    pathParams["table_name"] = tableName
    pathParams["id"] = id

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/database/:connection_id/:table_name/rows/:id", pathParams))
    if err != nil {
        return CommonMessage{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

    raw, err := json.Marshal(payload)
    if err != nil {
        return CommonMessage{}, err
    }

    var reqBody = bytes.NewReader(raw)

    req, err := http.NewRequest("PUT", u.String(), reqBody)
    if err != nil {
        return CommonMessage{}, err
    }

    req.Header.Set("Content-Type", "application/json")

    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return CommonMessage{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return CommonMessage{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 400 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 401 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 404 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return CommonMessage{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// CreateRow 
func (client *BackendDatabaseTag) CreateRow(connectionId string, tableName string, payload BackendDatabaseRow) (CommonMessage, error) {
    pathParams := make(map[string]interface{})
    pathParams["connection_id"] = connectionId
    pathParams["table_name"] = tableName

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/database/:connection_id/:table_name/rows", pathParams))
    if err != nil {
        return CommonMessage{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

    raw, err := json.Marshal(payload)
    if err != nil {
        return CommonMessage{}, err
    }

    var reqBody = bytes.NewReader(raw)

    req, err := http.NewRequest("POST", u.String(), reqBody)
    if err != nil {
        return CommonMessage{}, err
    }

    req.Header.Set("Content-Type", "application/json")

    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return CommonMessage{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return CommonMessage{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 400 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 401 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 404 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return CommonMessage{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// GetRow 
func (client *BackendDatabaseTag) GetRow(connectionId string, tableName string, id string) (BackendDatabaseRow, error) {
    pathParams := make(map[string]interface{})
    pathParams["connection_id"] = connectionId
    pathParams["table_name"] = tableName
    pathParams["id"] = id

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/database/:connection_id/:table_name/rows/:id", pathParams))
    if err != nil {
        return BackendDatabaseRow{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendDatabaseRow{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendDatabaseRow{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendDatabaseRow{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data BackendDatabaseRow
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 401 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendDatabaseRow{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 404 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendDatabaseRow{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendDatabaseRow{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return BackendDatabaseRow{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// GetRows 
func (client *BackendDatabaseTag) GetRows(connectionId string, tableName string, startIndex int, count int, filterBy string, filterOp string, filterValue string, sortBy string, sortOrder string, columns string) (BackendDatabaseRows, error) {
    pathParams := make(map[string]interface{})
    pathParams["connection_id"] = connectionId
    pathParams["table_name"] = tableName

    queryParams := make(map[string]interface{})
    queryParams["startIndex"] = startIndex
    queryParams["count"] = count
    queryParams["filterBy"] = filterBy
    queryParams["filterOp"] = filterOp
    queryParams["filterValue"] = filterValue
    queryParams["sortBy"] = sortBy
    queryParams["sortOrder"] = sortOrder
    queryParams["columns"] = columns

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/database/:connection_id/:table_name/rows", pathParams))
    if err != nil {
        return BackendDatabaseRows{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendDatabaseRows{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendDatabaseRows{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendDatabaseRows{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data BackendDatabaseRows
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 401 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendDatabaseRows{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 404 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendDatabaseRows{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendDatabaseRows{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return BackendDatabaseRows{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// DeleteTable 
func (client *BackendDatabaseTag) DeleteTable(connectionId string, tableName string) (CommonMessage, error) {
    pathParams := make(map[string]interface{})
    pathParams["connection_id"] = connectionId
    pathParams["table_name"] = tableName

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/database/:connection_id/:table_name", pathParams))
    if err != nil {
        return CommonMessage{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("DELETE", u.String(), nil)
    if err != nil {
        return CommonMessage{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return CommonMessage{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return CommonMessage{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 400 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 401 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 404 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return CommonMessage{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// UpdateTable 
func (client *BackendDatabaseTag) UpdateTable(connectionId string, tableName string, payload BackendDatabaseTable) (CommonMessage, error) {
    pathParams := make(map[string]interface{})
    pathParams["connection_id"] = connectionId
    pathParams["table_name"] = tableName

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/database/:connection_id/:table_name", pathParams))
    if err != nil {
        return CommonMessage{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

    raw, err := json.Marshal(payload)
    if err != nil {
        return CommonMessage{}, err
    }

    var reqBody = bytes.NewReader(raw)

    req, err := http.NewRequest("PUT", u.String(), reqBody)
    if err != nil {
        return CommonMessage{}, err
    }

    req.Header.Set("Content-Type", "application/json")

    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return CommonMessage{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return CommonMessage{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 400 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 401 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 404 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return CommonMessage{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// CreateTable 
func (client *BackendDatabaseTag) CreateTable(connectionId string, payload BackendDatabaseTable) (CommonMessage, error) {
    pathParams := make(map[string]interface{})
    pathParams["connection_id"] = connectionId

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/database/:connection_id", pathParams))
    if err != nil {
        return CommonMessage{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

    raw, err := json.Marshal(payload)
    if err != nil {
        return CommonMessage{}, err
    }

    var reqBody = bytes.NewReader(raw)

    req, err := http.NewRequest("POST", u.String(), reqBody)
    if err != nil {
        return CommonMessage{}, err
    }

    req.Header.Set("Content-Type", "application/json")

    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return CommonMessage{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return CommonMessage{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 400 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 401 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 404 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return CommonMessage{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return CommonMessage{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// GetTable 
func (client *BackendDatabaseTag) GetTable(connectionId string, tableName string) (BackendDatabaseTable, error) {
    pathParams := make(map[string]interface{})
    pathParams["connection_id"] = connectionId
    pathParams["table_name"] = tableName

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/database/:connection_id/:table_name", pathParams))
    if err != nil {
        return BackendDatabaseTable{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendDatabaseTable{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendDatabaseTable{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendDatabaseTable{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data BackendDatabaseTable
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 401 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendDatabaseTable{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 404 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendDatabaseTable{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendDatabaseTable{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return BackendDatabaseTable{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// GetTables 
func (client *BackendDatabaseTag) GetTables(connectionId string) (BackendDatabaseTables, error) {
    pathParams := make(map[string]interface{})
    pathParams["connection_id"] = connectionId

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/database/:connection_id", pathParams))
    if err != nil {
        return BackendDatabaseTables{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendDatabaseTables{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendDatabaseTables{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendDatabaseTables{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data BackendDatabaseTables
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 401 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendDatabaseTables{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 404 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendDatabaseTables{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendDatabaseTables{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return BackendDatabaseTables{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// GetConnections 
func (client *BackendDatabaseTag) GetConnections() (BackendDatabaseConnections, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/database", pathParams))
    if err != nil {
        return BackendDatabaseConnections{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendDatabaseConnections{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendDatabaseConnections{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendDatabaseConnections{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data BackendDatabaseConnections
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 401 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendDatabaseConnections{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendDatabaseConnections{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return BackendDatabaseConnections{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}




func NewBackendDatabaseTag(httpClient *http.Client, parser *sdkgen.Parser) *BackendDatabaseTag {
	return &BackendDatabaseTag{
        internal: &sdkgen.TagAbstract{
            HttpClient: httpClient,
            Parser: parser,
        },
	}
}
