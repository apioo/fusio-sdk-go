
// SystemMetaTag automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app


package sdk

import (
    "bytes"
    "encoding/json"
    "errors"
    "fmt"
    
    "io"
    "net/http"
    "net/url"
    
)

type SystemMetaTag struct {
    internal *sdkgen.TagAbstract
}



// GetSchema 
func (client *SystemMetaTag) GetSchema(name string) (SystemSchema, error) {
    pathParams := make(map[string]interface{})
    pathParams["name"] = name

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/system/schema/:name", pathParams))
    if err != nil {
        return SystemSchema{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return SystemSchema{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return SystemSchema{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return SystemSchema{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data SystemSchema
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 404 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return SystemSchema{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 410 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return SystemSchema{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return SystemSchema{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return SystemSchema{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// GetRoutes 
func (client *SystemMetaTag) GetRoutes() (SystemRoute, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/system/route", pathParams))
    if err != nil {
        return SystemRoute{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return SystemRoute{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return SystemRoute{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return SystemRoute{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data SystemRoute
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    return SystemRoute{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// GetOAuthConfiguration 
func (client *SystemMetaTag) GetOAuthConfiguration() (SystemOAuthConfiguration, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/system/oauth-authorization-server", pathParams))
    if err != nil {
        return SystemOAuthConfiguration{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return SystemOAuthConfiguration{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return SystemOAuthConfiguration{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return SystemOAuthConfiguration{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data SystemOAuthConfiguration
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    return SystemOAuthConfiguration{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// GetHealth 
func (client *SystemMetaTag) GetHealth() (SystemHealthCheck, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/system/health", pathParams))
    if err != nil {
        return SystemHealthCheck{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return SystemHealthCheck{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return SystemHealthCheck{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return SystemHealthCheck{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data SystemHealthCheck
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    return SystemHealthCheck{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// GetDebug 
func (client *SystemMetaTag) GetDebug(payload Passthru) (Passthru, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/system/debug", pathParams))
    if err != nil {
        return Passthru{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

    raw, err := json.Marshal(payload)
    if err != nil {
        return Passthru{}, err
    }

    var reqBody = bytes.NewReader(raw)

    req, err := http.NewRequest("POST", u.String(), reqBody)
    if err != nil {
        return Passthru{}, err
    }

    req.Header.Set("Content-Type", "application/json")

    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return Passthru{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return Passthru{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data Passthru
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    return Passthru{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// GetAbout 
func (client *SystemMetaTag) GetAbout() (SystemAbout, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/system/about", pathParams))
    if err != nil {
        return SystemAbout{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return SystemAbout{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return SystemAbout{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return SystemAbout{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data SystemAbout
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    return SystemAbout{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}




func NewSystemMetaTag(httpClient *http.Client, parser *sdkgen.Parser) *SystemMetaTag {
	return &SystemMetaTag{
        internal: &sdkgen.TagAbstract{
            HttpClient: httpClient,
            Parser: parser,
        },
	}
}
