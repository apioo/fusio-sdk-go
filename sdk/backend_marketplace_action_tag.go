
// BackendMarketplaceActionTag automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app


package sdk

import (
    "bytes"
    "encoding/json"
    "errors"
    "github.com/apioo/sdkgen-go"
    "io"
    "net/http"
    "net/url"
    
)

type BackendMarketplaceActionTag struct {
    internal *sdkgen.TagAbstract
}



// Upgrade 
func (client *BackendMarketplaceActionTag) Upgrade(user string, name string) (CommonMessage, error) {
    pathParams := make(map[string]interface{})
    pathParams["user"] = user
    pathParams["name"] = name

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/marketplace/action/:user/:name", pathParams))
    if err != nil {
        return CommonMessage{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("PUT", u.String(), nil)
    if err != nil {
        return CommonMessage{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return CommonMessage{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return CommonMessage{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response CommonMessage
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return CommonMessage{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        case 400:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return CommonMessage{}, err
            }

            return CommonMessage{}, &CommonMessageException{
                Payload: response,
            }
        case 401:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return CommonMessage{}, err
            }

            return CommonMessage{}, &CommonMessageException{
                Payload: response,
            }
        case 404:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return CommonMessage{}, err
            }

            return CommonMessage{}, &CommonMessageException{
                Payload: response,
            }
        case 410:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return CommonMessage{}, err
            }

            return CommonMessage{}, &CommonMessageException{
                Payload: response,
            }
        case 500:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return CommonMessage{}, err
            }

            return CommonMessage{}, &CommonMessageException{
                Payload: response,
            }
        default:
            return CommonMessage{}, errors.New("the server returned an unknown status code")
    }
}

// Get 
func (client *BackendMarketplaceActionTag) Get(user string, name string) (MarketplaceAction, error) {
    pathParams := make(map[string]interface{})
    pathParams["user"] = user
    pathParams["name"] = name

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/marketplace/action/:user/:name", pathParams))
    if err != nil {
        return MarketplaceAction{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return MarketplaceAction{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return MarketplaceAction{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return MarketplaceAction{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response MarketplaceAction
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return MarketplaceAction{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        case 401:
            var response MarketplaceMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return MarketplaceAction{}, err
            }

            return MarketplaceAction{}, &MarketplaceMessageException{
                Payload: response,
            }
        case 404:
            var response MarketplaceMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return MarketplaceAction{}, err
            }

            return MarketplaceAction{}, &MarketplaceMessageException{
                Payload: response,
            }
        case 410:
            var response MarketplaceMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return MarketplaceAction{}, err
            }

            return MarketplaceAction{}, &MarketplaceMessageException{
                Payload: response,
            }
        case 500:
            var response MarketplaceMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return MarketplaceAction{}, err
            }

            return MarketplaceAction{}, &MarketplaceMessageException{
                Payload: response,
            }
        default:
            return MarketplaceAction{}, errors.New("the server returned an unknown status code")
    }
}

// Install 
func (client *BackendMarketplaceActionTag) Install(payload MarketplaceInstall) (MarketplaceMessage, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/marketplace/action", pathParams))
    if err != nil {
        return MarketplaceMessage{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

    raw, err := json.Marshal(payload)
    if err != nil {
        return MarketplaceMessage{}, err
    }

    var reqBody = bytes.NewReader(raw)

    req, err := http.NewRequest("POST", u.String(), reqBody)
    if err != nil {
        return MarketplaceMessage{}, err
    }

    req.Header.Set("Content-Type", "application/json")

    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return MarketplaceMessage{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return MarketplaceMessage{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response MarketplaceMessage
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return MarketplaceMessage{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        case 400:
            var response MarketplaceMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return MarketplaceMessage{}, err
            }

            return MarketplaceMessage{}, &MarketplaceMessageException{
                Payload: response,
            }
        case 401:
            var response MarketplaceMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return MarketplaceMessage{}, err
            }

            return MarketplaceMessage{}, &MarketplaceMessageException{
                Payload: response,
            }
        case 500:
            var response MarketplaceMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return MarketplaceMessage{}, err
            }

            return MarketplaceMessage{}, &MarketplaceMessageException{
                Payload: response,
            }
        default:
            return MarketplaceMessage{}, errors.New("the server returned an unknown status code")
    }
}

// GetAll 
func (client *BackendMarketplaceActionTag) GetAll(startIndex int, query string) (MarketplaceActionCollection, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})
    queryParams["startIndex"] = startIndex
    queryParams["query"] = query

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/marketplace/action", pathParams))
    if err != nil {
        return MarketplaceActionCollection{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return MarketplaceActionCollection{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return MarketplaceActionCollection{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return MarketplaceActionCollection{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response MarketplaceActionCollection
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return MarketplaceActionCollection{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        case 401:
            var response MarketplaceMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return MarketplaceActionCollection{}, err
            }

            return MarketplaceActionCollection{}, &MarketplaceMessageException{
                Payload: response,
            }
        case 500:
            var response MarketplaceMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return MarketplaceActionCollection{}, err
            }

            return MarketplaceActionCollection{}, &MarketplaceMessageException{
                Payload: response,
            }
        default:
            return MarketplaceActionCollection{}, errors.New("the server returned an unknown status code")
    }
}



func NewBackendMarketplaceActionTag(httpClient *http.Client, parser *sdkgen.Parser) *BackendMarketplaceActionTag {
	return &BackendMarketplaceActionTag{
        internal: &sdkgen.TagAbstract{
            HttpClient: httpClient,
            Parser: parser,
        },
	}
}
