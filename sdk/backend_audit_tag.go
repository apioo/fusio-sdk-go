
// BackendAuditTag automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app


package sdk

import (
    
    "encoding/json"
    "errors"
    "fmt"
    
    "io"
    "net/http"
    "net/url"
    
)

type BackendAuditTag struct {
    internal *sdkgen.TagAbstract
}



// Get 
func (client *BackendAuditTag) Get(auditId string) (BackendAudit, error) {
    pathParams := make(map[string]interface{})
    pathParams["audit_id"] = auditId

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/audit/$audit_id<[0-9]+>", pathParams))
    if err != nil {
        return BackendAudit{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendAudit{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendAudit{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendAudit{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data BackendAudit
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 401 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendAudit{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 404 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendAudit{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 410 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendAudit{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendAudit{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return BackendAudit{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// GetAll 
func (client *BackendAuditTag) GetAll(startIndex int, count int, search string, from string, to string, appId int, userId int, event string, ip string, message string) (BackendAuditCollection, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})
    queryParams["startIndex"] = startIndex
    queryParams["count"] = count
    queryParams["search"] = search
    queryParams["from"] = from
    queryParams["to"] = to
    queryParams["appId"] = appId
    queryParams["userId"] = userId
    queryParams["event"] = event
    queryParams["ip"] = ip
    queryParams["message"] = message

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/audit", pathParams))
    if err != nil {
        return BackendAuditCollection{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendAuditCollection{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendAuditCollection{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendAuditCollection{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data BackendAuditCollection
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    if statusCode == 401 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendAuditCollection{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    if statusCode == 500 {
        var data CommonMessage
        err := json.Unmarshal(respBody, &data)

        return BackendAuditCollection{}, &CommonMessageException{
            Payload: data,
            Previous: err,
        }
    }

    return BackendAuditCollection{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}




func NewBackendAuditTag(httpClient *http.Client, parser *sdkgen.Parser) *BackendAuditTag {
	return &BackendAuditTag{
        internal: &sdkgen.TagAbstract{
            HttpClient: httpClient,
            Parser: parser,
        },
	}
}
