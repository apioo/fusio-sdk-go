
// BackendStatisticTag automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app


package sdk

import (
    
    "encoding/json"
    "errors"
    "github.com/apioo/sdkgen-go"
    "io"
    "net/http"
    "net/url"
    
)

type BackendStatisticTag struct {
    internal *sdkgen.TagAbstract
}



// GetUserRegistrations 
func (client *BackendStatisticTag) GetUserRegistrations(startIndex int, count int, search string, from string, to string, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (BackendStatisticChart, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})
    queryParams["startIndex"] = startIndex
    queryParams["count"] = count
    queryParams["search"] = search
    queryParams["from"] = from
    queryParams["to"] = to
    queryParams["operationId"] = operationId
    queryParams["appId"] = appId
    queryParams["userId"] = userId
    queryParams["ip"] = ip
    queryParams["userAgent"] = userAgent
    queryParams["method"] = method
    queryParams["path"] = path
    queryParams["header"] = header
    queryParams["body"] = body

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/user_registrations", pathParams))
    if err != nil {
        return BackendStatisticChart{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendStatisticChart{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response BackendStatisticChart
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return BackendStatisticChart{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        case 401:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        case 500:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        default:
            return BackendStatisticChart{}, errors.New("the server returned an unknown status code")
    }
}

// GetUsedPoints 
func (client *BackendStatisticTag) GetUsedPoints(startIndex int, count int, search string, from string, to string, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (BackendStatisticChart, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})
    queryParams["startIndex"] = startIndex
    queryParams["count"] = count
    queryParams["search"] = search
    queryParams["from"] = from
    queryParams["to"] = to
    queryParams["operationId"] = operationId
    queryParams["appId"] = appId
    queryParams["userId"] = userId
    queryParams["ip"] = ip
    queryParams["userAgent"] = userAgent
    queryParams["method"] = method
    queryParams["path"] = path
    queryParams["header"] = header
    queryParams["body"] = body

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/used_points", pathParams))
    if err != nil {
        return BackendStatisticChart{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendStatisticChart{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response BackendStatisticChart
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return BackendStatisticChart{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        case 401:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        case 500:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        default:
            return BackendStatisticChart{}, errors.New("the server returned an unknown status code")
    }
}

// GetTimePerOperation 
func (client *BackendStatisticTag) GetTimePerOperation(startIndex int, count int, search string, from string, to string, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (BackendStatisticChart, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})
    queryParams["startIndex"] = startIndex
    queryParams["count"] = count
    queryParams["search"] = search
    queryParams["from"] = from
    queryParams["to"] = to
    queryParams["operationId"] = operationId
    queryParams["appId"] = appId
    queryParams["userId"] = userId
    queryParams["ip"] = ip
    queryParams["userAgent"] = userAgent
    queryParams["method"] = method
    queryParams["path"] = path
    queryParams["header"] = header
    queryParams["body"] = body

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/time_per_operation", pathParams))
    if err != nil {
        return BackendStatisticChart{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendStatisticChart{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response BackendStatisticChart
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return BackendStatisticChart{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        case 401:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        case 500:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        default:
            return BackendStatisticChart{}, errors.New("the server returned an unknown status code")
    }
}

// GetTimeAverage 
func (client *BackendStatisticTag) GetTimeAverage(startIndex int, count int, search string, from string, to string, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (BackendStatisticChart, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})
    queryParams["startIndex"] = startIndex
    queryParams["count"] = count
    queryParams["search"] = search
    queryParams["from"] = from
    queryParams["to"] = to
    queryParams["operationId"] = operationId
    queryParams["appId"] = appId
    queryParams["userId"] = userId
    queryParams["ip"] = ip
    queryParams["userAgent"] = userAgent
    queryParams["method"] = method
    queryParams["path"] = path
    queryParams["header"] = header
    queryParams["body"] = body

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/time_average", pathParams))
    if err != nil {
        return BackendStatisticChart{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendStatisticChart{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response BackendStatisticChart
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return BackendStatisticChart{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        case 401:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        case 500:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        default:
            return BackendStatisticChart{}, errors.New("the server returned an unknown status code")
    }
}

// GetTestCoverage 
func (client *BackendStatisticTag) GetTestCoverage() (BackendStatisticChart, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/test_coverage", pathParams))
    if err != nil {
        return BackendStatisticChart{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendStatisticChart{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response BackendStatisticChart
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return BackendStatisticChart{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        case 401:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        case 500:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        default:
            return BackendStatisticChart{}, errors.New("the server returned an unknown status code")
    }
}

// GetMostUsedOperations 
func (client *BackendStatisticTag) GetMostUsedOperations(startIndex int, count int, search string, from string, to string, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (BackendStatisticChart, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})
    queryParams["startIndex"] = startIndex
    queryParams["count"] = count
    queryParams["search"] = search
    queryParams["from"] = from
    queryParams["to"] = to
    queryParams["operationId"] = operationId
    queryParams["appId"] = appId
    queryParams["userId"] = userId
    queryParams["ip"] = ip
    queryParams["userAgent"] = userAgent
    queryParams["method"] = method
    queryParams["path"] = path
    queryParams["header"] = header
    queryParams["body"] = body

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/most_used_operations", pathParams))
    if err != nil {
        return BackendStatisticChart{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendStatisticChart{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response BackendStatisticChart
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return BackendStatisticChart{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        case 401:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        case 500:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        default:
            return BackendStatisticChart{}, errors.New("the server returned an unknown status code")
    }
}

// GetMostUsedApps 
func (client *BackendStatisticTag) GetMostUsedApps(startIndex int, count int, search string, from string, to string, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (BackendStatisticChart, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})
    queryParams["startIndex"] = startIndex
    queryParams["count"] = count
    queryParams["search"] = search
    queryParams["from"] = from
    queryParams["to"] = to
    queryParams["operationId"] = operationId
    queryParams["appId"] = appId
    queryParams["userId"] = userId
    queryParams["ip"] = ip
    queryParams["userAgent"] = userAgent
    queryParams["method"] = method
    queryParams["path"] = path
    queryParams["header"] = header
    queryParams["body"] = body

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/most_used_apps", pathParams))
    if err != nil {
        return BackendStatisticChart{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendStatisticChart{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response BackendStatisticChart
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return BackendStatisticChart{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        case 401:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        case 500:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        default:
            return BackendStatisticChart{}, errors.New("the server returned an unknown status code")
    }
}

// GetMostUsedActivities 
func (client *BackendStatisticTag) GetMostUsedActivities(startIndex int, count int, search string, from string, to string, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (BackendStatisticChart, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})
    queryParams["startIndex"] = startIndex
    queryParams["count"] = count
    queryParams["search"] = search
    queryParams["from"] = from
    queryParams["to"] = to
    queryParams["operationId"] = operationId
    queryParams["appId"] = appId
    queryParams["userId"] = userId
    queryParams["ip"] = ip
    queryParams["userAgent"] = userAgent
    queryParams["method"] = method
    queryParams["path"] = path
    queryParams["header"] = header
    queryParams["body"] = body

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/most_used_activities", pathParams))
    if err != nil {
        return BackendStatisticChart{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendStatisticChart{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response BackendStatisticChart
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return BackendStatisticChart{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        case 401:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        case 500:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        default:
            return BackendStatisticChart{}, errors.New("the server returned an unknown status code")
    }
}

// GetIssuedTokens 
func (client *BackendStatisticTag) GetIssuedTokens(startIndex int, count int, search string, from string, to string, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (BackendStatisticChart, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})
    queryParams["startIndex"] = startIndex
    queryParams["count"] = count
    queryParams["search"] = search
    queryParams["from"] = from
    queryParams["to"] = to
    queryParams["operationId"] = operationId
    queryParams["appId"] = appId
    queryParams["userId"] = userId
    queryParams["ip"] = ip
    queryParams["userAgent"] = userAgent
    queryParams["method"] = method
    queryParams["path"] = path
    queryParams["header"] = header
    queryParams["body"] = body

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/issued_tokens", pathParams))
    if err != nil {
        return BackendStatisticChart{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendStatisticChart{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response BackendStatisticChart
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return BackendStatisticChart{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        case 401:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        case 500:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        default:
            return BackendStatisticChart{}, errors.New("the server returned an unknown status code")
    }
}

// GetIncomingTransactions 
func (client *BackendStatisticTag) GetIncomingTransactions(startIndex int, count int, search string, from string, to string, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (BackendStatisticChart, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})
    queryParams["startIndex"] = startIndex
    queryParams["count"] = count
    queryParams["search"] = search
    queryParams["from"] = from
    queryParams["to"] = to
    queryParams["operationId"] = operationId
    queryParams["appId"] = appId
    queryParams["userId"] = userId
    queryParams["ip"] = ip
    queryParams["userAgent"] = userAgent
    queryParams["method"] = method
    queryParams["path"] = path
    queryParams["header"] = header
    queryParams["body"] = body

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/incoming_transactions", pathParams))
    if err != nil {
        return BackendStatisticChart{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendStatisticChart{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response BackendStatisticChart
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return BackendStatisticChart{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        case 401:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        case 500:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        default:
            return BackendStatisticChart{}, errors.New("the server returned an unknown status code")
    }
}

// GetIncomingRequests 
func (client *BackendStatisticTag) GetIncomingRequests(startIndex int, count int, search string, from string, to string, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (BackendStatisticChart, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})
    queryParams["startIndex"] = startIndex
    queryParams["count"] = count
    queryParams["search"] = search
    queryParams["from"] = from
    queryParams["to"] = to
    queryParams["operationId"] = operationId
    queryParams["appId"] = appId
    queryParams["userId"] = userId
    queryParams["ip"] = ip
    queryParams["userAgent"] = userAgent
    queryParams["method"] = method
    queryParams["path"] = path
    queryParams["header"] = header
    queryParams["body"] = body

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/incoming_requests", pathParams))
    if err != nil {
        return BackendStatisticChart{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendStatisticChart{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response BackendStatisticChart
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return BackendStatisticChart{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        case 401:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        case 500:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        default:
            return BackendStatisticChart{}, errors.New("the server returned an unknown status code")
    }
}

// GetErrorsPerOperation 
func (client *BackendStatisticTag) GetErrorsPerOperation(startIndex int, count int, search string, from string, to string, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (BackendStatisticChart, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})
    queryParams["startIndex"] = startIndex
    queryParams["count"] = count
    queryParams["search"] = search
    queryParams["from"] = from
    queryParams["to"] = to
    queryParams["operationId"] = operationId
    queryParams["appId"] = appId
    queryParams["userId"] = userId
    queryParams["ip"] = ip
    queryParams["userAgent"] = userAgent
    queryParams["method"] = method
    queryParams["path"] = path
    queryParams["header"] = header
    queryParams["body"] = body

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/errors_per_operation", pathParams))
    if err != nil {
        return BackendStatisticChart{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendStatisticChart{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response BackendStatisticChart
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return BackendStatisticChart{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        case 401:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        case 500:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        default:
            return BackendStatisticChart{}, errors.New("the server returned an unknown status code")
    }
}

// GetCountRequests 
func (client *BackendStatisticTag) GetCountRequests(startIndex int, count int, search string, from string, to string, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (BackendStatisticCount, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})
    queryParams["startIndex"] = startIndex
    queryParams["count"] = count
    queryParams["search"] = search
    queryParams["from"] = from
    queryParams["to"] = to
    queryParams["operationId"] = operationId
    queryParams["appId"] = appId
    queryParams["userId"] = userId
    queryParams["ip"] = ip
    queryParams["userAgent"] = userAgent
    queryParams["method"] = method
    queryParams["path"] = path
    queryParams["header"] = header
    queryParams["body"] = body

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/count_requests", pathParams))
    if err != nil {
        return BackendStatisticCount{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendStatisticCount{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendStatisticCount{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendStatisticCount{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response BackendStatisticCount
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return BackendStatisticCount{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        case 401:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticCount{}, err
            }

            return BackendStatisticCount{}, &CommonMessageException{
                Payload: response,
            }
        case 500:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticCount{}, err
            }

            return BackendStatisticCount{}, &CommonMessageException{
                Payload: response,
            }
        default:
            return BackendStatisticCount{}, errors.New("the server returned an unknown status code")
    }
}

// GetActivitiesPerUser 
func (client *BackendStatisticTag) GetActivitiesPerUser(startIndex int, count int, search string, from string, to string, operationId int, appId int, userId int, ip string, userAgent string, method string, path string, header string, body string) (BackendStatisticChart, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})
    queryParams["startIndex"] = startIndex
    queryParams["count"] = count
    queryParams["search"] = search
    queryParams["from"] = from
    queryParams["to"] = to
    queryParams["operationId"] = operationId
    queryParams["appId"] = appId
    queryParams["userId"] = userId
    queryParams["ip"] = ip
    queryParams["userAgent"] = userAgent
    queryParams["method"] = method
    queryParams["path"] = path
    queryParams["header"] = header
    queryParams["body"] = body

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/backend/statistic/activities_per_user", pathParams))
    if err != nil {
        return BackendStatisticChart{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return BackendStatisticChart{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BackendStatisticChart{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response BackendStatisticChart
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return BackendStatisticChart{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        case 401:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        case 500:
            var response CommonMessage
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return BackendStatisticChart{}, err
            }

            return BackendStatisticChart{}, &CommonMessageException{
                Payload: response,
            }
        default:
            return BackendStatisticChart{}, errors.New("the server returned an unknown status code")
    }
}



func NewBackendStatisticTag(httpClient *http.Client, parser *sdkgen.Parser) *BackendStatisticTag {
	return &BackendStatisticTag{
        internal: &sdkgen.TagAbstract{
            HttpClient: httpClient,
            Parser: parser,
        },
	}
}
